//file:noinspection GroovyAccessibility

plugins {
    id 'com.mgd.core.gradle.s3' version '1.1.4'
    id 'io.mateo.cxf-codegen' version '1.0.1'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'application'

import com.mgd.core.gradle.*

mainClassName = 'com.tramchester.App'

def candidate = System.getenv("CIRCLE_BUILD_NUM") ?: "0"
// override build number if RELEASE_NUMBER set, needed because of way circle ci workflows operate
def buildNumber = System.getenv("RELEASE_NUMBER") ?: candidate
def environment = System.getenv("ENV") ?: "Dev"
def isWindows = System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')

def s3prefix = 'dist/' + buildNumber
def prodConfig = 'config/local.yml'

s3 {
    bucket = 'tramchester2dist'
}

// this is used in the generated dist zip filename
version = 1.0

project.ext {
    dropwizardVersion = '2.0.26'
}

repositories {
    maven {
        url "https://repo.osgeo.org/repository/release/"
    }
    mavenCentral()
    maven {
        url "https://raw.github.com/neo4j-contrib/m2/master/releases"
    }
}

// useful reminder ./gradlew -q dependencyInsight --dependency X.Y:Z
dependencies {
    implementation('javax.measure:unit-api:2.1.3')
    implementation('io.dropwizard:dropwizard-core:' + dropwizardVersion)
    // slf4j in governator was causing race condition with dropwizard start up code on initial get of logger
    implementation('com.netflix.governator:governator:1.17.12') { exclude group:'org.slf4j', module:'slf4j-api'}
    implementation 'com.google.inject:guice:5.1.0'
    implementation('org.neo4j:neo4j:4.4.10') { exclude group:'org.slf4j', module:'slf4j-nop' }
    implementation 'com.github.cliftonlabs:json-simple:4.0.1',
            'commons-io:commons-io:2.11.0',
            'org.apache.httpcomponents:httpclient:4.5.13',
            'org.apache.commons:commons-collections4:4.4',
            'com.github.ben-manes.caffeine:caffeine:3.1.1'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.13.4',
            'com.fasterxml.jackson.core:jackson-databind:2.13.4',
            'com.fasterxml.jackson.module:jackson-module-afterburner:2.13.4',
            'com.fasterxml.jackson.module:jackson-module-blackbird:2.13.4',
            'com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.13.4',
            'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.13.4'
    implementation('com.smoketurner:dropwizard-swagger:2.0.12-1')

    // aws sdk
    implementation('software.amazon.awssdk:s3:2.17.282')
    implementation('software.amazon.awssdk:cloudwatch:2.17.282')
    implementation('software.amazon.awssdk:cloudformation:2.17.282')
    // aws cdk
    implementation 'software.amazon.awscdk:core:1.164.0',
            'software.amazon.awscdk:s3:1.164.0',
            'software.amazon.awscdk:ec2:1.164.0',
            'software.amazon.awscdk:elasticloadbalancingv2:1.184.1',
            'software.amazon.awscdk:autoscaling:1.164.0',
            'software.amazon.awscdk:cdk-cx-api:2.27.0'

    implementation('org.geotools:gt-main:27.1')
    implementation('org.geotools:gt-epsg-hsql:26.4')

    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.0',
            'org.junit.platform:junit-platform-launcher:1.9.0',
            'org.assertj:assertj-core:3.23.1',
            'io.dropwizard:dropwizard-testing:' + dropwizardVersion,
            'org.easymock:easymock:4.3',
            'org.seleniumhq.selenium:selenium-java:3.141.59',
            'org.hamcrest:hamcrest:2.2'

    // supports the codegen from the rail live data api, updating these versions is fraught as dependencies are
    // not being maintained by some of the downstream libraries
    cxfCodegen 'jakarta.xml.ws:jakarta.xml.ws-api:2.3.3'
    cxfCodegen 'jakarta.annotation:jakarta.annotation-api:1.3.5'
    cxfCodegen 'ch.qos.logback:logback-classic:1.2.11'
    implementation 'com.sun.xml.ws:jaxws-rt:2.3.3'
}

sourceSets {
    main {
        java {
            srcDirs = ['main/src']
        }
    }
    test {
        java {
            srcDirs = ['main/test']
        }
        resources.srcDir file('main/test/resources')
    }
}

cxfCodegen {
    wsdl2java {
        openLDBWS {
            wsdl = file('config/OpenLDBWS.wsdl')
            markGenerated = true
            extendedSoapHeaders = true
        }
    }
}

compileJava.dependsOn wsdl2java

processResources {
    exclude('**/app/') // via webpack
}

task cfnassist {
    doLast {
        ant.taskdef(name: 'cfnassist', classname: 'tw.com.ant.CfnAssistAntTask') {
            classpath {
                fileset(dir: 'lib/cfnassist-1.2.85/lib/', includes: '*.jar')
                dirset(dir: 'lib/cfnassist-1.2.85/conf/')
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.deprecation = true
    options.compilerArgs.addAll(['-Xlint'])
}

task stage(dependsOn: ['clean', 'installApp'])

task cleanGraph() {
    doLast {
        delete 'databases/integrationBusTest' ,
                'databases/integrationTramTest',
                'databases/integrationTrainTest',
                'databases/integrationNeighboursTest',
                'databases/neighboursTest',
                'databases/integrationTramTrainGMTest',
                'databases/tramchesterAcceptance.db',
                'databases/all.db',
                'tramchester.db', 'buses.db', 'trains.db', 'all.db', 'rail.db', 'gm_rail.db'
    }
}


clean {
    dependsOn cleanGraph
    delete 'src/main/resources/app/dist/'
    delete fileTree('data/tram') {
        include '*.txt'
        include '*.zip'
        include '*.csv'
    }
    delete fileTree('data/bus') {
        include '*.txt'
        include '*.zip'
        include '*.csv'
    }
    delete fileTree('data/rail') {
        include '*.*'
    }
    delete fileTree('data/naptan') {
        include '*.xml'
        include '*.zip'
    }
    delete fileTree('data/nptg') {
        include '*.csv'
        include '*.zip'
    }
    delete fileTree('data/postcodes') {
        include '**/*.csv'
    }
    delete('data/postcodes')
    delete('testData/cache')
}

run {
    // see deploy/setupTramWebServerAWSLinux.sh
    maxHeapSize = '700m'
    dependsOn 'webpack'
    args 'server', prodConfig
}

test {
    useJUnitPlatform()
}

task cdkApp(type:JavaExec, dependsOn:classes) {
    mainClass = 'com.tramchester.deployment.CdkApp'
    classpath = sourceSets.main.runtimeClasspath
}

task buses(type:JavaExec, dependsOn: 'webpack') {
    mainClass = mainClassName
    classpath = sourceSets.main.runtimeClasspath
    maxHeapSize = "3g"
    args 'server', 'config/buses.yml'
}

task frequency(type:JavaExec, dependsOn: 'webpack') {
    mainClass = mainClassName
    classpath = sourceSets.main.runtimeClasspath
    maxHeapSize = "3g"
    args 'server', 'config/frequency.yml'
}

task rail(type:JavaExec, dependsOn: 'webpack') {
    mainClass = mainClassName
    classpath = sourceSets.main.runtimeClasspath
    maxHeapSize = "3g"
    args 'server', 'config/rail.yml'
}

task gm(type:JavaExec, dependsOn: 'webpack') {
    mainClass = mainClassName
    classpath = sourceSets.main.runtimeClasspath
    maxHeapSize = "1g"
    args 'server', 'config/gm.yml'
}

task gmProfile(type:JavaExec, dependsOn: 'webpack') {
    mainClass = mainClassName
    classpath = sourceSets.main.runtimeClasspath
    maxHeapSize = "1g"
    jvmArgs '-agentpath:/home/ianc/dev/tools/visualvm_213/visualvm/lib/deployed/jdk16/linux-amd64/libprofilerinterface.so=/home/ianc/dev/tools/visualvm_213/visualvm/lib,5140'
    args 'server', 'config/gm.yml'
}

task all(type:JavaExec, dependsOn: 'webpack') {
    mainClass = mainClassName
    classpath = sourceSets.main.runtimeClasspath
    maxHeapSize = "3g"
    args 'server', 'config/all.yml'
}

task busTest(type: Test) {
    useJUnitPlatform {
        includeTags 'BusTest'
    }
}

task unit(type: Test, dependsOn: compileJava) {
    useJUnitPlatform()
    filter {
        includeTestsMatching "com.tramchester.unit.*"
    }
    testLogging {
        exceptionFormat "full" // default is "short"
    }
}

task liveMessages(type: Test, dependsOn: compileJava) {
    useJUnitPlatform {
        includeTags "liveDataMessages"
    }
    filter {
        includeTestsMatching "com.tramchester.integration.*"
    }
    testLogging {
        exceptionFormat "full" // default is "short"
        events "passed", "skipped", "failed", "started", "standardError"
    }
}

task integration(type: Test, dependsOn: compileJava) {
    minHeapSize = "1000m"
    maxHeapSize = "1750m"
    useJUnitPlatform {
        excludeTags "liveDataMessages" // these go away periodically...
        //excludeTags "liveData" // also goes away on occasion
        //excludeTags "dataExpiry" // can be useful to exclude when big changes to timetable are upcoming
        excludeTags "postcode" // not needed for tram, but used by buses
        excludeTags "BusTest"
        excludeTags "TrainTest"
        excludeTags "GMTest"
    }
    filter {
        includeTestsMatching "com.tramchester.integration.*"
    }
    testLogging {
        exceptionFormat "full" // default is "short"
        events "passed", "skipped", "failed", "started", "standardError" //, "standardOut"
    }
}

task integrationGM(type: Test, dependsOn: compileJava) {
    minHeapSize = "1000m"
    maxHeapSize = "1750m"
    useJUnitPlatform {
        includeTags "GMTest"
        includeTags "dataExpiry"
    }
    filter {
        includeTestsMatching "com.tramchester.integration.*"
    }
    systemProperty("com.tramchester.config","TramAndTrainGreaterManchesterConfig")
    testLogging {
        exceptionFormat "full" // default is "short"
        events "passed", "skipped", "failed", "started", "standardError" //, "standardOut"
    }
}

task dualTestIntegration(type: Test, dependsOn: compileJava) {
    minHeapSize = "1000m"
    maxHeapSize = "1750m"
    useJUnitPlatform {
        includeTags "DualTest"
    }
    filter {
        includeTestsMatching "com.tramchester.integration.*"
    }
    systemProperty("com.tramchester.config","TramAndTrainGreaterManchesterConfig")
    testLogging {
        exceptionFormat "full" // default is "short"
        events "passed", "skipped", "failed", "started", "standardError" //, "standardOut"
    }
}

task integrationProfile(type: Test, dependsOn: compileJava) {
    minHeapSize = "1000m"
    maxHeapSize = "1750m"
    //jvmArgs '-agentpath:/home/ianc/dev/tools/visualvm_213/visualvm/lib/deployed/jdk16/linux-amd64/libprofilerinterface.so=/home/ianc/dev/tools/visualvm_213/visualvm/lib,5140'
    jvmArgs '-agentpath:/Users/icartwri/dev/tools/visualvm_213/visualvm/lib/deployed/jdk16/mac/libprofilerinterface.jnilib=/Users/icartwri/dev/tools/visualvm_213/visualvm/lib,5140'
    useJUnitPlatform {
        excludeTags "postcode" // not needed for tram, but used by buses
        excludeTags "BusTest"
        excludeTags "TrainTest"
        excludeTags "GMTest"
    }
    filter {
        includeTestsMatching "com.tramchester.integration.*"
    }
}

task dataUpdated(type: Test, dependsOn: compileJava) {
    minHeapSize = "1000m"
    maxHeapSize = "1750m"
    useJUnitPlatform {
        includeTags "DataUpdateTest"
    }
    filter {
        includeTestsMatching "com.tramchester.integration.*"
    }
    testLogging {
        exceptionFormat "full"
        events "failed"
    }
}

task s3Test(type: Test, dependsOn: compileJava) {
    useJUnitPlatform {
        includeTags "S3Test"
    }
    testLogging {
        exceptionFormat "full" // default is "short"
        events "passed", "skipped", "failed", "started", "standardError" //, "standardOut"
    }
}

task integrationBus(type: Test, dependsOn: compileJava) {
    minHeapSize = "1000m"
    maxHeapSize = "3000m"
    useJUnitPlatform {
        includeTags "BusTest"
        includeTags "postcode"
    }
    filter {
        includeTestsMatching "com.tramchester.integration.*"
    }
    testLogging {
        exceptionFormat "full" // default is "short"
        events "passed", "skipped", "failed", "started", "standardError" //, "standardOut"
    }
}

task integrationRail(type: Test, dependsOn: compileJava) {
    minHeapSize = "1000m"
    maxHeapSize = "8000m"
    useJUnitPlatform {
        includeTags "TrainTest"
    }
    filter {
        includeTestsMatching "com.tramchester.integration.*"
    }
    testLogging {
        exceptionFormat "full" // default is "short"
        events "passed", "skipped", "failed", "started", "standardError" //, "standardOut"
    }
}

task integrationRailProfile(type: Test, dependsOn: compileJava) {
    minHeapSize = "1000m"
    maxHeapSize = "3000m"
    useJUnitPlatform {
        includeTags "TrainTest"
    }
    jvmArgs '-agentpath:/home/ianc/dev/tools/visualvm_213/visualvm/lib/deployed/jdk16/linux-amd64/libprofilerinterface.so=/home/ianc/dev/tools/visualvm_213/visualvm/lib,5140'
    filter {
        includeTestsMatching "com.tramchester.integration.*"
    }
    testLogging {
        exceptionFormat "full" // default is "short"
        events "passed", "skipped", "failed", "started", "standardError" //, "standardOut"
    }
}

task apiTests(type: Test, dependsOn: compileJava) {
    useJUnitPlatform()
    filter {
        includeTestsMatching "com.tramchester.integration.resources.*"
    }
    testLogging {
        exceptionFormat "full" // default is "short"
        events "passed", "skipped", "failed", "started", "standardError" //, "standardOut"
    }
}

task graphTests(type: Test, dependsOn: compileJava) {
    minHeapSize = "1000m"
    maxHeapSize = "1750m"
    useJUnitPlatform()
    filter {
        includeTestsMatching "com.tramchester.integration.graph.*"
    }
    testLogging {
        exceptionFormat "full" // default is "short"
        events "passed", "skipped", "failed", "started", "standardError" //, "standardOut"
    }
}

// allow re-run of the task to aid in performance tuning
allprojects {
    tasks.matching { task -> task.name == "allStationsTest" }.all {
        outputs.upToDateWhen { false }
    }
}

task allStationsTest(type: Test, dependsOn: compileJava) {
    minHeapSize = "1000m"
    maxHeapSize = "1750m"
    useJUnitPlatform()
    filter {
        includeTestsMatching "com.tramchester.integration.graph.RouteCalculatorTestAllJourneys"
    }
    testLogging {
        exceptionFormat "full" // default is "short"
        events("passed", "skipped", "failed")
    }
}

task buildGraphTest(type: Test, dependsOn: compileJava) {
    minHeapSize = "1000m"
    maxHeapSize = "1750m"
    useJUnitPlatform()
    filter {
        includeTestsMatching "com.tramchester.integration.graph.GraphBuildAndStartTest"
    }
    testLogging {
        exceptionFormat "full" // default is "short"
        events "passed", "skipped", "failed", "started" //, "standardError", "standardOut"
    }
}

task acceptance(type: Test) {
    dependsOn 'allowhost'
    dependsOn 'compileJava'
    dependsOn 'webpack'
    useJUnitPlatform()
    filter {
        includeTestsMatching "com.tramchester.acceptance.*"
    }
    testLogging {
        exceptionFormat "full" // default is "short"
        events "passed", "skipped", "failed", "started", "standardError" , "standardOut"
    }
    finalizedBy {
        blockhost
    }
}

task localAcceptance(type: Test, dependsOn: ['webpack', 'compileJava']) {
    minHeapSize = "1000m"
    maxHeapSize = "2500m"
    useJUnitPlatform()
    filter {
        includeTestsMatching "com.tramchester.acceptance.*"
    }
    testLogging {
        events "passed", "skipped", "failed", "started", "standardError" , "standardOut"
    }
}

task localAcceptanceGeo(type: Test, dependsOn: ['webpack', 'compileJava']) {
    minHeapSize = "1000m"
    maxHeapSize = "2500m"
    useJUnitPlatform()
    filter {
        includeTestsMatching "com.tramchester.acceptance.geolocation.*"
    }
    testLogging {
        events "passed", "skipped", "failed", "started", "standardError" , "standardOut"
    }
}

task diagrams(dependsOn: cfnassist) {
    doLast {
        ant.cfnassist() {
            Diagrams(target: '.')
        }
    }
}

task npmInstall(type: Exec) {
    inputs.file("package.json")
    inputs.file("package-lock.json")
    outputs.dir("node_modules")

    if (isWindows) {
        commandLine "npm.cmd", "install"
    }
    else {
        commandLine "npm", "install"
    }
}

jar {
    dependsOn 'webpack'
    into 'app', {
        from 'build/resources/main/app'
    }
    exclude('app/*')
}

task webpack(type: Exec, dependsOn: npmInstall) {
    inputs.file("package.json")
    inputs.file("package-lock.json")
    inputs.file("webpack.config.js")
    inputs.files(fileTree("src/main/resources/app"))

    if (isWindows) {
        commandLine "./node_modules/.bin/webpack.cmd"
    } else {
        commandLine "./node_modules/.bin/webpack"
    }
}

distributions {
    main {
        contents {
            into ('config') {
                from 'config'
            }
            into ('bin') {
                from 'deploy/start.sh'
                from 'deploy/nessus_agent_install.sh'
            }
        }
    }
}

// gm here so include both sets of data
task pullData(type:JavaExec, dependsOn:classes) {
    mainClass = 'com.tramchester.deployment.cli.FetchDataCLI'
    classpath = sourceSets.main.runtimeClasspath
    args 'config/gm.yml'
}

// temp additional target while deploying train/tram version to just UAT
task buildDatabaseUAT(type:JavaExec, dependsOn: [classes]) {
    mainClass = 'com.tramchester.deployment.cli.BuildGraphCLI'
    classpath = sourceSets.main.runtimeClasspath
    args 'config/gm.yml', 'build/distributions/database'
}

task buildDatabase(type:JavaExec, dependsOn: [classes, buildDatabaseUAT]) {
    mainClass = 'com.tramchester.deployment.cli.BuildGraphCLI'
    classpath = sourceSets.main.runtimeClasspath
    args prodConfig, 'build/distributions/database'
}

task upload(dependsOn: ['uploadDataSources', 'uploadApp'])

// gm here so include both sets of data
task uploadDataSources(type:JavaExec, dependsOn: ['pullData','classes']) {
    mainClass = 'com.tramchester.deployment.cli.UploadSourceDataCLI'
    classpath = sourceSets.main.runtimeClasspath
    args 'config/gm.yml', s3prefix
}

task zipDB(type:Zip, dependsOn: 'buildDatabase') {
    from 'build/distributions/database'
    include '*.db/**'
    archiveFileName = 'database.zip'
}

task copyIntoUploadDir(type: Copy, dependsOn: [zipDB, distZip]) {
    from 'build/distributions/database.zip'
    from 'build/distributions/tramchester-1.0.zip'
    from 'deploy/setupTramWebServerAWSLinux.sh'
    from 'deploy/cloudInitAWSLinux.txt'
    into 'build/distributions/uploadDir'
}

task uploadApp(type: S3Upload, dependsOn:copyIntoUploadDir) {
    keyPrefix = s3prefix
    sourceDir = 'build/distributions/uploadDir'
}

// https://data.atoc.org/member-area

task uploadRailToS3(type: S3Upload) {
    key = 'railData/ttis571.zip'
    file = 'data/rail/ttis571.zip'
    overwrite = false
}

task infra(dependsOn: cfnassist) {
    doLast {
        ant.cfnassist(project: 'tramchesterB', env: environment, sns: 'true', capabilityIAM: 'true') {
            Templates(target: 'deploy/infra/'+environment )
        }
    }
}

task deploy(dependsOn: cfnassist) {
    doLast {
        ant.cfnassist(project: 'tramchesterB', env: environment, buildNumber: buildNumber, sns: 'true') {
            Templates(target: 'deploy/servers.json')
        }
    }
}

task deployCDK(type: Exec, dependsOn: [npmInstall, classes]) {
    commandLine "./node_modules/.bin/cdk", "deploy"
}

task updateLB(dependsOn: cfnassist) {
    doLast {
        ant.cfnassist(project: 'tramchesterB', env: environment, buildNumber: buildNumber, sns: 'true') {
            ELBUpdate(typeTag: 'web')
        }
    }
}

task tidy(dependsOn: cfnassist) {
    doLast {
        ant.cfnassist(project: 'tramchesterB', env: environment) {
            TidyStacks(target: 'deploy/servers.json', typeTag: 'web')
        }
    }
}

task allowHostDev(dependsOn: cfnassist) {
    doLast {
        ant.cfnassist(project: 'tramchesterB', env: 'Dev') {
            WhiteList(port: '443', tag: 'web')
        }
    }
}

task blockHostDev(dependsOn: cfnassist) {
    doLast {
        ant.cfnassist(project: 'tramchesterB', env: 'Dev') {
            BlackList(port: '443', tag: 'web')
        }
    }
}

task allowHostUAT(dependsOn: cfnassist) {
    doLast {
        ant.cfnassist(project: 'tramchesterB', env: 'UAT') {
            WhiteList(port: '443', tag: 'web')
        }
    }
}

task denyHostUAT(dependsOn: cfnassist) {
    doLast {
        ant.cfnassist(project: 'tramchesterB', env: 'UAT') {
            BlackList(port: '443', tag: 'web')
        }
    }
}

task allowhost(dependsOn: cfnassist) {
    doLast {
        ant.cfnassist(project: 'tramchesterB', env: environment) {
            WhiteList(port: '443', tag: 'web')
        }
    }
}

task blockhost(dependsOn: cfnassist) {
    doLast {
        ant.cfnassist(project: 'tramchesterB', env: environment) {
            BlackList(port: '443', tag: 'web')
        }
    }
}






